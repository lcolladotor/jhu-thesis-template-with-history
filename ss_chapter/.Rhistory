library(knitr)
purl("ss_chapter.Rnw")
system("open ss_chapter.R")
<<label=opts, results='hide', echo=FALSE, message = FALSE, warning=FALSE>>=
library(knitr)
knit_hooks$set(webgl = hook_webgl)
opts_chunk$set(echo=FALSE, prompt=FALSE, message=FALSE, warning=FALSE, comment="", results='hide')
@
<<label=setup, echo=FALSE >>=
rm(list=ls())
library(cttools)
library(fslr)
library(oro.dicom)
library(bitops)
library(arules)
library(plyr)
library(reshape2)
library(ggplot2)
library(matrixStats)
library(gridExtra)
library(ICC)
library(xtable)
# library(magrittr)
library(tidyr)
new.ids = readLines("newid_list.txt")
rdas = list.files(path = getwd(), pattern=".*_CT_.*Header_Info.Rda",
full.names = TRUE, recursive = TRUE)
gant = rdas[grepl("antry", rdas)]
gant = gsub("_ungantry", "", gant)
rdas = rdas[ ! (rdas %in% gant)]
# stopifnot(!any(grepl("antry", rdas)))
rdas = rdas[grepl("Sorted", rdas)]
rda = data.frame(rda=rdas, stringsAsFactors = FALSE)
rda$id = basename(rda$rda)
rda$id = gsub("(.*)_Header_Info.*", "\\1", rda$id)
rda$id = gsub("_ungantry", "", rda$id)
runold = FALSE
rm(list=ls())
library(cttools)
library(fslr)
library(oro.dicom)
library(bitops)
library(arules)
library(plyr)
library(reshape2)
library(ggplot2)
library(matrixStats)
library(gridExtra)
library(ICC)
library(xtable)
# library(magrittr)
library(tidyr)
new.ids = readLines("newid_list.txt")
rdas = list.files(path = getwd(), pattern=".*_CT_.*Header_Info.Rda",
full.names = TRUE, recursive = TRUE)
gant = rdas[grepl("antry", rdas)]
gant = gsub("_ungantry", "", gant)
rdas = rdas[ ! (rdas %in% gant)]
# stopifnot(!any(grepl("antry", rdas)))
rdas = rdas[grepl("Sorted", rdas)]
rda = data.frame(rda=rdas, stringsAsFactors = FALSE)
rda$id = basename(rda$rda)
rda$id = gsub("(.*)_Header_Info.*", "\\1", rda$id)
rda$id = gsub("_ungantry", "", rda$id)
runold = FALSE
if (runold) rda = rda[ !(rda$id %in% new.ids), ]
get.val = function(rda, val){
if ("dcmtables" %in% ls()) rm(list="dcmtables")
ungant.rda = gsub("_Header_Info\\.Rda",
"_ungantry_Header_Info\\.Rda",
rda)
if (file.exists(ungant.rda)) rda = ungant.rda
load(rda)
cn = colnames(dcmtables)
n.slice = length(unique(dcmtables[, "0018-0050-SliceThickness"]))
co.kern = unique(dcmtables[, val])
co.kern$n.slice = n.slice
stopifnot(nrow(co.kern) == 1)
co.kern
}
fname = "Overlap_Statistics.Rda"
load(fname)
ddf$pid = as.numeric(gsub("-", "", ddf$pid))
demog = read.csv(file.path(basedir, "Patient_Demographics.csv"), stringsAsFactors = FALSE)
demog = demog[,c("Age", "Gender", "Ethnicity", "patientName")]
demog_valid = demog[ demog$patientName %in% unique(ddf$pid), ]
ddf$pid = NULL
img.id = unique(basename(ddf$img))
img.id = nii.stub(img.id)
stopifnot(all(img.id %in% rda$id))
rda = rda[ rda$id %in% img.id, ]
rownames(rda) = NULL
purl("ss_chapter.Rnw")
## ----label=opts, results='hide', echo=FALSE, message = FALSE, warning=FALSE----
library(knitr)
knit_hooks$set(webgl = hook_webgl)
opts_chunk$set(echo=FALSE, prompt=FALSE, message=FALSE, warning=FALSE, comment="", results='hide')
## ----label=setup, echo=FALSE---------------------------------------------
rm(list=ls())
library(cttools)
library(fslr)
library(oro.dicom)
library(bitops)
library(arules)
library(plyr)
library(reshape2)
library(ggplot2)
library(matrixStats)
library(gridExtra)
library(ICC)
library(xtable)
# library(magrittr)
library(tidyr)
new.ids = readLines("newid_list.txt")
rdas = list.files(path = getwd(), pattern=".*_CT_.*Header_Info.Rda",
full.names = TRUE, recursive = TRUE)
gant = rdas[grepl("antry", rdas)]
gant = gsub("_ungantry", "", gant)
rdas = rdas[ ! (rdas %in% gant)]
# stopifnot(!any(grepl("antry", rdas)))
rdas = rdas[grepl("Sorted", rdas)]
rda = data.frame(rda=rdas, stringsAsFactors = FALSE)
rda$id = basename(rda$rda)
rda$id = gsub("(.*)_Header_Info.*", "\\1", rda$id)
rda$id = gsub("_ungantry", "", rda$id)
runold = FALSE
if (runold) rda = rda[ !(rda$id %in% new.ids), ]
get.val = function(rda, val){
if ("dcmtables" %in% ls()) rm(list="dcmtables")
ungant.rda = gsub("_Header_Info\\.Rda",
"_ungantry_Header_Info\\.Rda",
rda)
if (file.exists(ungant.rda)) rda = ungant.rda
load(rda)
cn = colnames(dcmtables)
n.slice = length(unique(dcmtables[, "0018-0050-SliceThickness"]))
co.kern = unique(dcmtables[, val])
co.kern$n.slice = n.slice
stopifnot(nrow(co.kern) == 1)
co.kern
}
fname = "Overlap_Statistics.Rda"
load(fname)
ddf$pid = as.numeric(gsub("-", "", ddf$pid))
demog = read.csv("Patient_Demographics.csv", stringsAsFactors = FALSE)
demog = demog[,c("Age", "Gender", "Ethnicity", "patientName")]
demog_valid = demog[ demog$patientName %in% unique(ddf$pid), ]
ddf$pid = NULL
img.id = unique(basename(ddf$img))
img.id = nii.stub(img.id)
stopifnot(all(img.id %in% rda$id))
rda = rda[ rda$id %in% img.id, ]
rownames(rda) = NULL
##############################
# Gantry tilt numbers and manufacturer
##############################
img.data = ldply(.data=rda$rda,  get.val,
val=c("0018-1210-ConvolutionKernel",
"0008-0070-Manufacturer",
"0018-1120-GantryDetectorTilt"),
.progress="text")
colnames(img.data) = c("kern", "man", "tilt", "nslices")
img.data$rda  = rda$rda
img.data$tilt = as.numeric(img.data$tilt)
# data$rda = df$rda
man.tab = sort(table(img.data$man, useNA='ifany'),
decreasing=TRUE)
stopifnot(length(man.tab) == 4)
manu= names(man.tab)
manu[manu == 'TOSHIBA'] = "Toshiba"
manu[manu == 'SIEMENS'] = "Siemens"
check.na = function(x){
stopifnot(all(!is.na(x)))
}
check.na(img.data$tilt)
n.gant = sum(img.data$tilt != 0)
x = sapply(rda$rda, function(x){
load(x)
st = dcmtables[, "0018-0050-SliceThickness"]
ust = unique(st)
lust = length(ust)
if (lust > 1){
print(ust)
}
lust
})
n.var.slice = sum(x > 1)
proper = function(mystr) {
x= strsplit(mystr, " ")[[1]]
paste(toupper(substr(x, 1, 1)), tolower(substring(x, 2)),
sep= "", collapse=" ")
}
uid = unique(basename(ddf$img))
nscans = length(uid)
num_scans = proper(qdap::replace_number(nscans))
pid = gsub("(\\d\\d\\d-(\\d|)\\d\\d\\d).*", "\\1", uid)
pid = unique(pid)
npt = length(pid)
ctr = unique(gsub("(\\d\\d\\d)-.*", "\\1", uid))
n.ctr = length(ctr)
stopifnot(nscans == npt)
stopifnot(sum(man.tab) == npt)
ddf = ddf[ !grepl("refill", ddf$ssimg), ]
cs =  sapply(ddf, class) == "list"
cs = names(cs)[cs]
for (icol in cs){
ddf[, icol] = unlist(ddf[, icol])
}
ddf$ratio = ddf$estvol / ddf$truevol
d = ddf
d$truevol = d$estvol = NULL
makeint = function(data){
data$scen = gsub(".*_SS_(.*)_Mask.*", "\\1", data$ssimg )
data$smooth = !grepl("nopresmooth", data$scen)
data$smooth = revalue(as.character(data$smooth),
c("TRUE"="Smoothed", "FALSE"="Unsmoothed"))
data$int = gsub("_nopresmooth", "", data$scen)
data
}
ddf = makeint(ddf)
ddf$diffvol = (ddf$truevol - ddf$estvol) / 1000
ddf$absdiff = abs(ddf$diffvol)
long = melt(d, id.vars = c("id", "img", "rimg",
"ssimg", "hdr"))
long = makeint(long)
long$id = as.numeric(factor(long$id))
runcols =  c("dice", "jaccard", "sens", "spec", "accur", "absdiff", "ratio")
rc = runcols[ !runcols %in% c("absdiff")]
wmax = function(x){
which(x == max(x))
}
x = ddf[ ddf$img == ddf$img[1], ]
res = ddply(ddf, .(img), function(x){
print(x$id[1])
xx = sapply(x[, rc], wmax)
xx = x$scen[xx]
# 	print(xx)
names(xx) = rc
print(length(xx))
xx
})
results= sapply(res[, rc], table)
maxtab = sapply(results, function(x) {
names(sort(x, decreasing=TRUE)[1])
})
res = ddply(ddf, .(scen), function(x){
cmin = colMins(as.matrix(x[, runcols]))
cmax = colMaxs(as.matrix(x[, runcols]))
cmean = colMeans(as.matrix(x[, runcols]))
cmed = colMedians(as.matrix(x[, runcols]))
xx = data.frame(t(cbind(cmin, cmax, cmean, cmed)))
xx$run = c("min", "max", "mean", "median")
xx
})
nospec = long[ long$variable %in% c("accur", "sens"),]
long = long[ long$variable != "jaccard", ]
long$variable = revalue(long$variable, c("sens" = "Sensitivity",
"spec" = "Specificity",
"accur" = "Accuracy",
"dice" = "Dice Similarity Index",
"ratio" = "Volume Ratio"))
## ----tests---------------------------------------------------------------
mytest = function(...){
wilcox.test(...)
}
all.smooth.tests = ddply(long, .(int), function(df){
p.value= ddply(df, .(variable), function(x){
stats = lapply(list(median, mean, sd), function(func){
res = aggregate(value ~ smooth, func, data=x)
})
names(stats) = c("median", "mean", "sd")
cn = stats[[1]]$smooth
stats = lapply(stats, function(x){
x$smooth = NULL
x = c(t(x))
names(x) = cn
x
})
stats = unlist(stats)
wt = wilcox.test(value ~ smooth, data=x, paired=TRUE)
tt = t.test(value ~ smooth, data=x, paired=TRUE)
return(c(wt.p.value=wt$p.value, tt.p.value = tt$p.value,  stats))
})
}, .progress="text")
all.int.tests = ddply(long, .(smooth), function(df){
df = df[df$int %in% c("0.01", "0.1"), ]
p.value= ddply(df, .(variable), function(x){
stats = lapply(list(median, mean, sd), function(func){
res = aggregate(value ~ int, func, data=x)
})
names(stats) = c("median", "mean", "sd")
cn = stats[[1]]$int
stats = lapply(stats, function(x){
x$int = NULL
x = c(t(x))
names(x) = cn
x
})
stats = unlist(stats)
wt = wilcox.test(value ~ int, data=x, paired=TRUE)
tt = t.test(value ~ int, data=x, paired=TRUE)
return(c(wt.p.value=wt$p.value, tt.p.value = tt$p.value,  stats))
})
}, .progress="text")
all.med.diffs = ddply(long, .(smooth), function(df){
df = df[df$int %in% c("0.01", "0.1"), ]
df = df[ order(df$id, df$variable, df$int), ]
diffs= ddply(df, .(variable), function(x){
#     x = df[ df$variable == "Sensitivity", ]
runvar = x$variable[1]
x = x[, c("value", "img", "int")]
x = reshape(x, direction="wide", idvar = "img", timevar="int")
d = x$value.0.01 - x$value.0.1
check = wilcox.test(d)
tt.check = t.test(d)
return(c(median=median(d), mean=mean(d), sd=sd(d), wt.p.value = check$p.value,
tt.p.value = tt.check$p.value))
})
}, .progress="text")
stopifnot(all.med.diffs$wt.p.value == all.int.tests$wt.p.value)
stopifnot(all.med.diffs$tt.p.value == all.int.tests$tt.p.value)
all.med.diffs$median = round(all.med.diffs$median, 4)
sm.diffs = all.med.diffs[ all.med.diffs$smooth == "Smoothed",]
tmp.names = sm.diffs$variable
sm.diffs = sm.diffs$median
sm.diffs = sprintf("%0.4f", sm.diffs)
names(sm.diffs) = tmp.names
smooth = all.int.tests[ all.int.tests$smooth == "Smoothed",]
pval <- function(pval) {
x <- ifelse(pval < 0.001, "< 0.001", sprintf("= %03.3f", pval))
return(x)
}
source('~/Dropbox/PhD_Thesis/ss_chapter/ss_chapter.R')
